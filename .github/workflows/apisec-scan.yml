name: API Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/mcp/**'
      - '.github/workflows/apisec-scan.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/mcp/**'
      - '.github/workflows/apisec-scan.yml'
  schedule:
    # Run weekly security scans on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to perform'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - dependency-only

jobs:
  secret-scan:
    name: Secret Detection Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.90.8
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Cache NuGet packages
      uses: actions/cache@v4.3.0
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Run NuGet Security Audit
      run: |
        echo "Running NuGet security audit..."
        dotnet list package --vulnerable --include-transitive > nuget-audit.txt 2>&1 || true
        cat nuget-audit.txt
        
        # Check if vulnerabilities were found
        if grep -q "vulnerable" nuget-audit.txt; then
          echo "::warning::Vulnerable NuGet packages detected. Review nuget-audit.txt for details."
          exit 1
        else
          echo "No vulnerable NuGet packages detected."
        fi

    - name: Upload NuGet audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nuget-security-audit
        path: nuget-audit.txt
        retention-days: 30

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'dependency-only'
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration Release --no-restore

    - name: Install security analysis tools
      run: |
        # Install security-focused analyzers
        dotnet add src/mcp/Avro.Mcp.Example package Microsoft.CodeAnalysis.NetAnalyzers --version 8.0.0 || true
        dotnet add src/mcp/Avro.Mcp.Example package SonarAnalyzer.CSharp --version 9.32.0.97167 || true

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        config-file: ./.github/codeql/codeql-config.yml

    - name: Build for CodeQL
      run: dotnet build --configuration Release --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  api-security-test:
    name: API Security Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Cache NuGet packages
      uses: actions/cache@v4.3.0
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore and build
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore

    - name: Start MCP server for testing
      run: |
        cd src/mcp/Avro.Mcp.Example
        dotnet run --configuration Release --urls "http://localhost:5000" &
        echo $! > server.pid
        
        # Wait for server to start
        sleep 10
        
        # Verify server is running
        curl -f http://localhost:5000/health || curl -f http://localhost:5000/ || echo "Server may not be fully ready"

    - name: Install OWASP ZAP
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2_14_0_unix.sh
        chmod +x ZAP_2_14_0_unix.sh
        sudo ./ZAP_2_14_0_unix.sh -q
        
    - name: Run OWASP ZAP baseline scan
      run: |
        # Create ZAP configuration
        mkdir -p zap-reports
        
        # Run baseline scan against the MCP server
        sudo /opt/zaproxy/zap.sh -cmd \
          -quickurl http://localhost:5000 \
          -quickout zap-reports/zap-baseline-report.html \
          -quickprogress || true
        
        # Run API scan if OpenAPI spec exists
        if [ -f "src/mcp/Avro.Mcp.Example/swagger.json" ]; then
          sudo /opt/zaproxy/zap.sh -cmd \
            -openapi src/mcp/Avro.Mcp.Example/swagger.json \
            -target http://localhost:5000 \
            -format json \
            -out zap-reports/zap-api-report.json || true
        fi

    - name: Stop MCP server
      if: always()
      run: |
        if [ -f src/mcp/Avro.Mcp.Example/server.pid ]; then
          kill $(cat src/mcp/Avro.Mcp.Example/server.pid) || true
        fi
        pkill -f "Avro.Mcp.Example" || true

    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-security-scan-results
        path: zap-reports/
        retention-days: 30

    - name: Process ZAP results
      if: always()
      run: |
        if [ -f "zap-reports/zap-baseline-report.html" ]; then
          echo "ZAP baseline scan completed. Check artifacts for detailed results."
          
          # Basic result parsing (you might want to enhance this)
          if grep -q "High\|Medium" zap-reports/zap-baseline-report.html; then
            echo "::warning::Potential security issues detected. Review ZAP report for details."
          fi
        fi

  security-headers-check:
    name: Security Headers Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Cache NuGet packages
      uses: actions/cache@v4.3.0
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Start MCP server
      run: |
        cd src/mcp/Avro.Mcp.Example
        dotnet run --configuration Release --urls "http://localhost:5000" &
        sleep 10

    - name: Check security headers
      run: |
        echo "Checking security headers..."
        
        # Check for essential security headers
        response=$(curl -s -I http://localhost:5000/ || curl -s -I http://localhost:5000/health || echo "")
        
        echo "Response headers:"
        echo "$response"
        
        # Check for security headers
        missing_headers=()
        
        if ! echo "$response" | grep -qi "x-content-type-options"; then
          missing_headers+=("X-Content-Type-Options")
        fi
        
        if ! echo "$response" | grep -qi "x-frame-options"; then
          missing_headers+=("X-Frame-Options")
        fi
        
        if ! echo "$response" | grep -qi "x-xss-protection"; then
          missing_headers+=("X-XSS-Protection")
        fi
        
        if ! echo "$response" | grep -qi "strict-transport-security"; then
          missing_headers+=("Strict-Transport-Security")
        fi
        
        if ! echo "$response" | grep -qi "content-security-policy"; then
          missing_headers+=("Content-Security-Policy")
        fi
        
        if [ ${#missing_headers[@]} -gt 0 ]; then
          echo "::warning::Missing security headers: ${missing_headers[*]}"
          echo "Consider adding these headers to improve API security."
        else
          echo "âœ… All essential security headers are present."
        fi

    - name: Stop server
      if: always()
      run: pkill -f "Avro.Mcp.Example" || true

  report-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, api-security-test, security-headers-check]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      
    - name: Generate security summary
      run: |
        echo "# ðŸ”’ API Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check job results
        echo "- **Dependency Scan:** ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- **SAST Scan:** ${{ needs.sast-scan.result }}" >> security-summary.md  
        echo "- **API Security Test:** ${{ needs.api-security-test.result }}" >> security-summary.md
        echo "- **Security Headers Check:** ${{ needs.security-headers-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## ðŸ“‹ Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review detailed scan results in the workflow artifacts" >> security-summary.md
        echo "2. Address any high or medium severity findings" >> security-summary.md
        echo "3. Update dependencies if vulnerabilities are found" >> security-summary.md
        echo "4. Consider implementing missing security headers" >> security-summary.md
        echo "5. Review and update SECURITY.md if needed" >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-summary
        path: security-summary.md
        retention-days: 90