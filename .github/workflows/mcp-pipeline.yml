name: MCP Flow

on:
  push:
    branches: [ main ]
    paths:
      - 'src/mcp/**'
      - 'src/sdk/**'
      - '.github/workflows/mcp-pipeline.yml'
      - 'tests/Avro.Mcp.*.UnitTests/**'
      - 'tests/Avro.Mcp.*.IntegrationTests/**'
      - 'Avro.sln'
      - 'Directory.*.props'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/mcp/**'
      - 'src/sdk/**'
      - '.github/workflows/mcp-pipeline.yml'
      - 'tests/Avro.Mcp.*.UnitTests/**'
      - 'tests/Avro.Mcp.*.IntegrationTests/**'
      - 'Avro.sln'
      - 'Directory.*.props'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Upload MCP server artifact
      uses: actions/upload-artifact@v4
      with:
        name: mcp-server-artifacts
        path: |
          **/bin/Release/net10.0/Avro.Mcp.Example*
          **/bin/Release/Avro.Mcp.*.nupkg

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run Unit Tests
      run: dotnet test --filter "FullyQualifiedName~Avro.Mcp" --configuration Release --verbosity normal --logger trx

    - name: Run Integration Tests
      run: dotnet test --filter "FullyQualifiedName~Avro.Mcp.Example.IntegrationTests" --configuration Release --verbosity normal --logger trx

  deploy:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build projects
      run: dotnet build --configuration Release --no-restore

    - name: Pack NuGet packages
      run: dotnet pack src/mcp/Avro.Mcp.Example --configuration Release --output ./nupkg --no-build

    - name: Add GitHub Package Registry source
      run: dotnet nuget add source --username 606 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/606/index.json"

    - name: Push NuGet packages to GitHub
      run: |
        dotnet nuget push ./nupkg/*.nupkg --source github --skip-duplicate