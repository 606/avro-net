name: SDK Flow

on:
  push:
    branches: [ main ]
    paths:
      - 'src/sdk/**'
      - 'tests/Avro.Os.*.UnitTests/**'
      - '.github/workflows/sdk-pipeline.yml'
      - 'Avro.sln'
      - 'Directory.*.props'
      - 'infra/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/sdk/**'
      - 'tests/Avro.Os.*.UnitTests/**'
      - '.github/workflows/sdk-pipeline.yml'
      - 'Avro.sln'
      - 'Directory.*.props'
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          8.0.x
          10.0.x-preview
        include-prerelease: true

    - name: Cache NuGet packages
      uses: actions/cache@v4.3.0
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Debug Path Info
      run: |
        echo "Current directory: $(pwd)"
        echo "GitHub workspace: ${{ github.workspace }}"
        echo "Repository root: $GITHUB_WORKSPACE"
        echo "Listing workspace contents:"
        ls -la ${{ github.workspace }}
        echo "Listing src/sdk directory:"
        ls -la ${{ github.workspace }}/src/sdk
        echo "Checking for Avro.Os.User project file:"
        test -f "${{ github.workspace }}/src/sdk/Avro.Os.User/Avro.Os.User.csproj" && echo "Project file exists" || echo "Project file NOT found"
        find ${{ github.workspace }} -name "Avro.Os.User.csproj"

    - name: Restore dependencies
      run: |
        dotnet restore ${{ github.workspace }}/Avro.sln

    - name: Build
      working-directory: ${{ github.workspace }}
      run: |
        # Generate complete build information for better analysis
        dotnet build --no-restore --configuration Release /p:UseSharedCompilation=false /p:DebugType=Full
        
        # Create a list of all dlls for analysis
        find . -name "*.dll" -not -path "*/obj/*" -not -path "*/bin/Debug/*" > compile_commands.json

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sdk-build-artifacts
        path: |
          **/bin/Release/Avro.Os.*.dll
          **/bin/Release/Avro.Os.*.nupkg

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Run Unit Tests
      run: dotnet test --filter "FullyQualifiedName~Avro.Os" --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Run Integration Tests
      run: dotnet test --filter "FullyQualifiedName~Avro.Os" --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Codecov
      uses: codecov/codecov-action@v5.5.1
      with:
        directory: ./coverage
        flags: sdk
        name: SDK Coverage
        fail_ci_if_error: false

  deploy:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build projects
      run: dotnet build --configuration Release --no-restore

    - name: Create output directory
      run: mkdir -p ./nupkg

    - name: Set Version
      run: |
        # Get commit count for versioning
        COMMITS=$(git rev-list --count HEAD)
        # Use semantic versioning with commit count
        VERSION="1.0.$COMMITS-preview.${{ github.run_number }}"
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Pack NuGet packages
      run: |
        # Add repository URL and commit hash to package metadata
        COMMIT_SHA=$(git rev-parse --short HEAD)
        COMMON_PROPS="/p:Version=${{ env.PACKAGE_VERSION }} \
          /p:PackageVersion=${{ env.PACKAGE_VERSION }} \
          /p:RepositoryUrl=https://github.com/606/avro-net \
          /p:RepositoryCommit=$COMMIT_SHA \
          /p:PackageProjectUrl=https://github.com/606/avro-net \
          /p:PackageLicenseExpression=MIT"

        dotnet pack src/sdk/Avro.Os.Abstractions --configuration Release --output ./nupkg --no-build $COMMON_PROPS
        dotnet pack src/sdk/Avro.Os.Identity --configuration Release --output ./nupkg --no-build $COMMON_PROPS
        dotnet pack src/sdk/Avro.Os.User --configuration Release --output ./nupkg --no-build $COMMON_PROPS

    - name: Generate Package Verification
      run: |
        for package in ./nupkg/*.nupkg; do
          # Generate checksum
          sha256sum "$package" > "${package}.sha256"
          # Generate package verification metadata
          echo "Package: $(basename "$package")" > "${package}.verification"
          echo "Created: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "${package}.verification"
          echo "Commit: ${{ github.sha }}" >> "${package}.verification"
          echo "Workflow: ${{ github.workflow }}" >> "${package}.verification"
          echo "Build: ${{ github.run_number }}" >> "${package}.verification"
          echo "SHA256: $(cat "${package}.sha256")" >> "${package}.verification"
        done

    - name: Archive NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkg/*.nupkg
        retention-days: 7

    - name: Upload Package Verification
      uses: actions/upload-artifact@v4
      with:
        name: nuget-verification
        path: |
          ./nupkg/*.verification
          ./nupkg/*.sha256
        
  terraform:
    needs: build
    uses: ./.github/workflows/terraform.yml
    with:
      working-directory: ./infra
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  validate:
    needs: [deploy, terraform]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'
        
    - name: Clear NuGet cache
      run: dotnet nuget locals all --clear
      
    - name: Add GitHub Package Registry source
      run: |
        dotnet nuget remove source github || echo "Source not found, continuing..."
        dotnet nuget add source --username 606 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/606/index.json"
      
    - name: Wait for package propagation
      run: sleep 60
      
    - name: Validate SDK packages from GitHub Registry
      run: |
        echo "Creating validation project..."
        dotnet new console -o ValidationApp
        cd ValidationApp
        
        echo "Configuring NuGet.config for GitHub Package Registry..."
        cat > nuget.config << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <packageSources>
            <add key="github" value="https://nuget.pkg.github.com/606/index.json" />
            <add key="nuget" value="https://api.nuget.org/v3/index.json" />
          </packageSources>
          <packageSourceCredentials>
            <github>
              <add key="Username" value="606" />
              <add key="ClearTextPassword" value="${{ secrets.GITHUB_TOKEN }}" />
            </github>
          </packageSourceCredentials>
        </configuration>
        EOF
        
        echo "Installing packages from GitHub Package Registry..."
        echo "Attempting to install Avro.Os.Abstractions..."
        dotnet add package Avro.Os.Abstractions --prerelease || {
          echo "Failed to install Avro.Os.Abstractions. Retrying in 30 seconds..."
          sleep 30
          dotnet add package Avro.Os.Abstractions --prerelease
        }
        
        echo "Attempting to install Avro.Os.Identity..."
        dotnet add package Avro.Os.Identity --prerelease || {
          echo "Failed to install Avro.Os.Identity. Retrying in 30 seconds..."
          sleep 30
          dotnet add package Avro.Os.Identity --prerelease
        }
        
        echo "Attempting to install Avro.Os.User..."
        dotnet add package Avro.Os.User --prerelease || {
          echo "Failed to install Avro.Os.User. Retrying in 30 seconds..."
          sleep 30
          dotnet add package Avro.Os.User --prerelease
        }
        
        echo "Creating validation code..."
        cat > Program.cs << 'EOF'
        using Avro.Os.Abstractions;
        using Avro.Os.Identity;
        using Avro.Os.User;
        
        var detector = new OsIdentity();
        var osInfo = new OperatingSystemInfo(detector);
        
        Console.WriteLine($"âœ… OS Detection Validation Successful!");
        Console.WriteLine($"OS Type: {osInfo.Type}");
        Console.WriteLine($"OS Version: {osInfo.Version}");
        Console.WriteLine($"Architecture: {osInfo.Architecture}");
        
        var currentUser = OsUser.GetCurrentUser();
        Console.WriteLine($"âœ… User Info Validation Successful!");
        Console.WriteLine($"Username: {currentUser.Username}");
        Console.WriteLine($"Home Directory: {currentUser.HomeDirectory}");
        Console.WriteLine($"Is Administrator: {currentUser.IsAdministrator}");
        
        Console.WriteLine($"\nðŸ“¦ Package validation completed successfully!");
        EOF
        
        echo "Running validation..."
        dotnet run