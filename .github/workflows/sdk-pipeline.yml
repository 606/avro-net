name: SDK Flow

on:
  push:
    branches: [ main ]
    paths:
      - 'src/sdk/**'
      - 'tests/Avro.Os.*.UnitTests/**'
      - '.github/workflows/sdk-pipeline.yml'
      - 'Avro.sln'
      - 'Directory.*.props'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/sdk/**'
      - 'tests/Avro.Os.*.UnitTests/**'
      - '.github/workflows/sdk-pipeline.yml'
      - 'Avro.sln'
      - 'Directory.*.props'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sdk-build-artifacts
        path: |
          **/bin/Release/Avro.Os.*.dll
          **/bin/Release/Avro.Os.*.nupkg

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Test
      run: dotnet test --filter "FullyQualifiedName~Avro.Os" --configuration Release --verbosity normal

  deploy:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build projects
      run: dotnet build --configuration Release --no-restore

    - name: Create output directory
      run: mkdir -p ./nupkg

    - name: Pack NuGet packages
      run: |
        dotnet pack src/sdk/Avro.Os.Abstractions --configuration Release --output ./nupkg --no-build
        dotnet pack src/sdk/Avro.Os.Identity --configuration Release --output ./nupkg --no-build

    - name: List packaged files
      run: ls -la ./nupkg/

    - name: Add GitHub Package Registry source
      run: dotnet nuget add source --username 606 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/606/index.json"

    - name: Push NuGet packages to GitHub
      run: |
        dotnet nuget push ./nupkg/*.nupkg --source github --skip-duplicate
        
  validate:
    needs: deploy
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'
        
    - name: Add GitHub Package Registry source
      run: dotnet nuget add source --username 606 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/606/index.json"
      
    - name: Wait for package propagation
      run: sleep 60
      
    - name: Validate SDK packages from GitHub Registry
      run: |
        echo "Creating validation project..."
        dotnet new console -o ValidationApp
        cd ValidationApp
        
        echo "Searching for available packages..."
        dotnet nuget search Avro.Os --source github --prerelease || echo "Search may not be available"
        
        echo "Installing packages from GitHub Package Registry..."
        echo "Attempting to install Avro.Os.Abstractions..."
        dotnet add package Avro.Os.Abstractions --source github --prerelease || {
          echo "Failed to install Avro.Os.Abstractions. Retrying in 30 seconds..."
          sleep 30
          dotnet add package Avro.Os.Abstractions --source github --prerelease
        }
        
        echo "Attempting to install Avro.Os.Identity..."
        dotnet add package Avro.Os.Identity --source github --prerelease || {
          echo "Failed to install Avro.Os.Identity. Retrying in 30 seconds..."
          sleep 30
          dotnet add package Avro.Os.Identity --source github --prerelease
        }
        
        echo "Creating validation code..."
        cat > Program.cs << 'EOF'
        using Avro.Os.Abstractions;
        using Avro.Os.Identity;
        
        var detector = new OsIdentity();
        var osInfo = new OperatingSystemInfo(detector);
        
        Console.WriteLine($"âœ… OS Detection Validation Successful!");
        Console.WriteLine($"OS Type: {osInfo.Type}");
        Console.WriteLine($"OS Version: {osInfo.Version}");
        Console.WriteLine($"Architecture: {osInfo.Architecture}");
        
        Console.WriteLine($"\nðŸ“¦ Package validation completed successfully!");
        EOF
        
        echo "Running validation..."
        dotnet run