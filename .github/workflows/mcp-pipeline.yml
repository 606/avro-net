name: MCP Flow

on:
  push:
    branches: [ main ]
    paths:
      - 'src/mcp/**'
      - 'src/sdk/**'
      - '.github/workflows/mcp-pipeline.yml'
      - '.github/workflows/terraform.yml'
      - 'tests/Avro.Mcp.*.UnitTests/**'
      - 'tests/Avro.Mcp.*.IntegrationTests/**'
      - 'Avro.sln'
      - 'Directory.*.props'
      - 'infra/mcp/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/mcp/**'
      - 'src/sdk/**'
      - '.github/workflows/mcp-pipeline.yml'
      - 'tests/Avro.Mcp.*.UnitTests/**'
      - 'tests/Avro.Mcp.*.IntegrationTests/**'
      - 'Avro.sln'
      - 'Directory.*.props'
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '10.0.100-rc.1.25451.107'
        dotnet-quality: 'preview'

    - name: Cache NuGet packages
      uses: actions/cache@v4.3.0
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Debug Path Info
      run: |
        echo "Current directory: $(pwd)"
        echo "GitHub workspace: ${{ github.workspace }}"
        echo "Repository root: $GITHUB_WORKSPACE"
        echo "Listing workspace contents:"
        ls -la ${{ github.workspace }}
        echo "Listing src/sdk directory:"
        ls -la ${{ github.workspace }}/src/sdk
        echo "Checking for Avro.Os.User project file:"
        test -f "${{ github.workspace }}/src/sdk/Avro.Os.User/Avro.Os.User.csproj" && echo "Project file exists" || echo "Project file NOT found"
        find ${{ github.workspace }} -name "Avro.Os.User.csproj"

    - name: Restore dependencies
      run: |
        dotnet restore ${{ github.workspace }}/Avro.sln

    - name: Build
      run: |
        # Generate complete build information for better analysis
        dotnet build --no-restore --configuration Release /p:UseSharedCompilation=false /p:DebugType=Full
        
        # Create a list of all dlls for analysis
        find . -name "*.dll" -not -path "*/obj/*" -not -path "*/bin/Debug/*" > compile_commands.json

    - name: Upload MCP server artifact
      uses: actions/upload-artifact@v4
      with:
        name: mcp-server-artifacts
        path: |
          **/bin/Release/net10.0/Avro.Mcp.Example*
          **/bin/Release/Avro.Mcp.*.nupkg

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run Unit Tests
      run: dotnet test --filter "FullyQualifiedName~Avro.Mcp" --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Run Integration Tests
      run: dotnet test --filter "FullyQualifiedName~Avro.Mcp.Example.IntegrationTests" --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Codecov
      uses: codecov/codecov-action@v5.5.1
      with:
        directory: ./coverage
        flags: mcp
        name: MCP Coverage
        fail_ci_if_error: false

  deploy:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build projects
      run: dotnet build --configuration Release --no-restore

    - name: Create output directory
      run: mkdir -p ./nupkg

    - name: Pack NuGet packages
      run: dotnet pack src/mcp/Avro.Mcp.Example --configuration Release --output ./nupkg --no-build

    - name: List packaged files
      run: ls -la ./nupkg/

    - name: Add GitHub Package Registry source
      run: dotnet nuget add source --username 606 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/606/index.json"

    - name: Archive NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: mcp-packages
        path: ./nupkg/*.nupkg
        retention-days: 30

  terraform:
    needs: build
    uses: ./.github/workflows/terraform.yml
    with:
      working-directory: ./infra/mcp
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  validate:
    needs: [deploy, terraform]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Download published application
      uses: actions/download-artifact@v5
      with:
        name: mcp-server-published
        path: ./mcp-server
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'
        dotnet-quality: 'preview'
        
    - name: Test MCP server startup
      run: |
        cd ./mcp-server
        echo "Testing MCP server can start..."
        timeout 10s dotnet Avro.Mcp.Example.dll --urls http://localhost:5000 || echo "Server started successfully"
        
        echo "✅ MCP Server validation completed successfully!"
        echo "� Application published and startup tested"